Game of live                                                                                                            PAGE 1
                         1     ;--------------------Game of live - --------------------
                         2     ;
                         3     ; Vorlesung:    Systemname Programmierung
                         4     ; Von:          Jennifer, Thomas und Alexander
                         5     ; https://de.wikipedia.org/wiki/Conways_Spiel_des_Lebens
                         6     ;
                         7     ;
                         8     ; Dauer New_Generation: 11,423ms
                         9
                        10     ; -----------------
                        11     ; Startpunkt
                        12     ;------------------
                        13             cseg    at 0h
0000 0150               14             ajmp    init            ;Überspringe interrupts und gehe zur initialisierung
                        15             cseg    at 100h
                        16
                        17     ; -----------------
                        18     ; Interrupt Timer 0
                        19     ;------------------
                        20             ORG     0bh             ;Einsprung Adresse für TF0
****WARNING:ThisORGhaslowervaluethanthepreviousone
000B 120075             21             call    setTimer0       ;Setzen des Startwertes von Timer0 (Da 16Bit kein automatischer reloa
000E 120087             22             call    timer0Routine   ;Springe zur routine für Timer0
0011 32                 23             reti                    ;Springe zur Stelle im Code vor dem Interrupt
                        24
                        25     ; -----------------
                        26     ; Interrupt timer 1
                        27     ;------------------
                        28             ORG     1bh
001B 12007E             29             call    setTimer1       ;Setzen des Startwertes von Timer1 (Da 16Bit kein automatischer reloa
001E 75280F             30             MOV     40, #0fh        ;       ;Setze Speicher an Stelle 40 auf #0Fh (TODO Richtiger Merker
0021 32                 31             reti                    ;Springe zur Stelle im Code vor dem Interrupt
                        32
                        33     ;------------------
                        34     ;init
                        35     ;------------------
                        36             ORG     50h
                        37     init:
0050 120178             38             call    initCanvas
                        39
0053 75A88A             40             mov     IE, #10001010b  ;Setze EA, ET0, ET1 um die Timer einzustellen
0056 758911             41             mov     tmod, #00010001b        ;Setze timer modus für T0 und T1 auf 16Bit
                        42
0059 120075             43             call    setTimer0       ;Setze Startwerte für T0
005C D28C               44             SETB    TR0             ;Starte T0
005E 12007E             45             call    setTimer1       ;Setze Startwerte für T1
0061 D28E               46             SETB    TR1             ;Starte T1
                        47
0063 120159             48             call    display
                        49
0066 120069             50             call    main
                        51
                        52     ;------------------
                        53     ;main (loop)
                        54     ;------------------
                        55     main:
0069 E528               56             MOV     A, 40           ;Lade byte welches von T1 gesetzt wird in Akku
006B 60FC               57             JZ      main            ;Wenn es null versuche es nochmal
006D 752800             58             MOV     40, #0          ;Sonst setze es auf null...
0070 120097             59             call    NEW_GENERATION  ;...und berechne die neue Generation
0073 80F4               60             jmp     main            ;Danach wieder von vorne
                        61
                        62     ;------------------
                        63     ;Rücksetzten der Timer
                        64     ;------------------
                        65     setTimer0:
0075 758A00             66             mov     tl0, #000h      ;Setzen des niederwertigen start bytes von T0
0078 758CFD             67             mov     th0, #0fdh      ;Setzen des höherwertigen start bytes von T0
007B D28C               68             SETB    TR0             ;Starte Timer 0
007D 22                 69             ret
                        70
                        71     setTimer1:
007E 758B68             72             mov     tl1, #068h      ;Setzen des niederwertigen start bytes von T1
0081 758DC5             73             mov     th1, #0C5h      ;Setzen des höherwertigen start bytes von T1
0084 D28E               74             SETB    TR1             ;Starte Timer 1
0086 22                 75             ret
                        76
                        77     ;----------------------
                        78     ; timer0 inerrupt routine
                        79     ;----------------------
                        80     timer0Routine:
0087 C000               81             push    00h             ;Speichern von R0 auf dem Stack, damit dieser nach der Interrupt rout
0089 C001               82             push    01h             ;Speichern von R1
008B C0E0               83             push    ACC             ;Das gleiche für den Akku
008D 120159             84             call    display         ;Einmal das Spielfeld zeichnen
0090 D0E0               85             pop     ACC             ;Rücksetzten von A aus dem Stack
0092 D001               86             pop     01h
0094 D000               87             pop     00h             ;Das gleiche für R0
0096 22                 88             ret
                        89
                        90     ;----------------------
                        91     ; Logik für die neue Generation
                        92     ;----------------------
                        93     new_generation:
0097 7A00               94             MOV     R2, #0          ;Zeilen Zähler (0-7)
                        95
                        96     checkrow:                       ;Iteriert durch alle Zeilen
0099 7B00               97             MOV     R3, #0          ;Spalten Zähler (0-7)
009B 7C00               98             MOV     R4, #0          ;R4 ist ein Zwischenspeicher für die neue Zeile
009D 7900               99             MOV     R1, #0          ;TODO
                       100
                       101     checkcolumn:                    ;Iteriert durch alle Spalten
009F 7F00              102             MOV     R7, #0          ;Zurücksetzen von R7 (Speichert die anzahl an Nachbarn einer Zelle zw
00A1 9001A2            103             mov     DPTR, #table2   ;Laden der Masken für die Nachbar-Checks
00A4 11E3              104             ACALL   checkTop        ;Überprüfen wie viele Nachbarn in der Zeile oberhalb der Zelle sind
00A6 11EE              105             ACALL   checkMid        ;Überprüfen wie viele Nachbarn in der Zeile der Zelle sind
00A8 11F3              106             ACALL   checkBottom     ;Überprüfen wie viele Nachbarn in der Zeile unterhalb der Zelle sind
                       107
00AA 90019A            108             mov     DPTR, #table    ;Setze DataPointer auf masken tabelle für das hinzufügen der neuen Ze
00AD EB                109             mov     A, R3           ;Lade die aktuelle Spaltennummer
00AE 93                110             movC    A, @A+DPTR      ;Hole Maske dass nur die Spalte gesetzt wird (z.B. Maske Spalte 0: #1
00AF FE                111             mov     R6, A           ;               ;Zwischenspeichern des Maske in R6
                       112
00B0 EA                113             MOV     A, R2           ;               ;Kopiere aktuelle Zeile der Zelle in R0
00B1 F8                114             MOV     R0, A           ;
00B2 E2                115             MOVX    A, @R0          ;               ;Lade Zeileninhalt aus Speicher
00B3 FD                116             MOV     R5, A           ;               ;Zwischenspeichern der Zeile in R5
                       117
00B4 EF                118             MOV     A, R7           ;               ;Hole die Anzahl an Nachbarn in den Akku zum vergleic
00B5 B40207            119             CJNE    A, #2, checkUnderPopulation     ;Überprüfe ob es zwei Nachbarn sind, wenn nicht dann
00B8 EE                120             MOV     A, R6           ;Wenn A = 2 -> Behalte Wert der Zelle bei und lade die in R6 zwischen
00B9 5D                121             ANL     A, R5           ;Maskiere Wert der Zelle aus
00BA 49                122             ORL     A, R1           ;Und füge ihn zur neuen Zeile hinzu
00BB F9                123             MOV     R1, A           ;Speichere den Wert der aktualisierten, neuen Zeile zwischen
00BC 0200CF            124             JMP     checkEnd        ;Die Überprüfung der Zelle ist zu Ende
                       125
                       126     checkUnderPopulation:           ;Überprüfe ob eine Unterpopulation vorliegt und die Zelle an Einsamke
00BF 5003              127             JNC     checkPerfectPopulation  ;Wenn A > 2, dann wurde das Carry bit durch CJNE auf 0 gesetz
00C1 0200CF            128             JMP     checkEnd        ;Sonst war es eine Unterpopulation und die Zelle stirbt (Wird nicht g
                       129
                       130     checkPerfectPopulation:         ;Überprüfe ob es genau 3 Nachbarn gibt und die Zelle reanimiert wird
00C4 B40308            131             CJNE    A, #3, checkEnd ;Wenn A != 3 können es jetzt nur noch mehr sein -> Zelle stirbt (wird
00C7 EE                132             MOV     A, R6           ;Lade die in R6 gespeicherte Maske
00C8 54FF              133             ANL     A, #11111111b   ;Setze die Zelle durch die Maske an der entsprechenden Stelle auf 1
00CA 49                134             ORL     A, R1           ;Berechne neue Zeile
00CB F9                135             MOV     R1, A           ;Füge Wert zur neuen Zeile hinzu
00CC 0200CF            136             JMP     checkEnd        ;Die Überprüfung endet hier
                       137
                       138     checkEnd:                       ;Sprungpunkt wenn die Überprüfungen enden
00CF 0B                139             INC     R3              ;Die Nächste Spalte wird betrachtet
00D0 EB                140             MOV     A, R3           ;Lade Spalten Nr. in Akku zum Vergleichen
00D1 B408CB            141             CJNE    A, #8, checkcolumn      ;Wenn die Spalten Nr. 8 entspricht wurde die komplette Zeile
                       142
                       143
00D4 EA                144             MOV     A, R2           ;               ;Stattdessen wird der Zeilenzähler zum Vergleichen in
00D5 2464              145             ADD     A, #100         ;               ;Und es wird 100 dazu addiert (Um sicherzugehen dass
00D7 F8                146             MOV     R0, A           ;               ;Die Speicherstellen Adresse wird in R0 geschrieben
00D8 E9                147             MOV     A, R1           ;               ;Und der zu speichernde Inhalt (die neue Zeile) in de
00D9 F2                148             MOVX    @R0, A          ;               ;Anschließend wird die Zeile in den Speicher geschrei
                       149
00DA 0A                150             INC     R2              ;Die Zeilen Nr. um ein erhöht
00DB EA                151             MOV     A, R2           ;und zu Vergleichszwecken un den Akku geschrieben
00DC B408BA            152             CJNE    A, #8, checkrow ;Wenn die Zeilen Nr. 8 entspricht wurden alle Zeilen bearbeitet und d
                       153
00DF 120128            154             call    copyNewGenerationToField        ;Die neue Generation wird nun vom Zwischenspeicher au
00E2 22                155             ret                     ;Fertig, kehre zur Hauptschleife "main" zurück
                       156
                       157     ;----------------------
                       158     ; Logik zum ermitteln der Anzahl an Nachbarn in der selben Zeile, der oberhalb und der unterhalb der
                       159     ;----------------------
                       160     checkTop:
00E3 EA                161             MOV     A, R2           ;Lade Zeilen Nr.
00E4 7807              162             MOV     R0, #7          ;               ;Wenn Zeilen Nr. = 0 ist die unterstee Zeile die "da
00E6 6002              163             JZ      gotTopRow       ;Falls Zeilen Nr. = 0 springe zu "gotTopRow" da keine weitere berec
00E8 14                164             DEC     A               ;                       ;Falls nicht entspricht die Zeilen Nr. darübe
00E9 F8                165             MOV     R0, A           ;               ;Speichern der Zeilen Nr. in R5
                       166
                       167     gotTopRow:
00EA 120102            168             CALL    calculateNeighbours     ;Berechne die Nachbarn für die Zeile
00ED 22                169             ret                     ;Fertig
                       170
                       171     checkMid:
00EE EA                172             MOV     A, R2           ;               ;Lade Zeilen Nr.
00EF F8                173             MOV     R0, A           ;               ;Speicher Zeilen Nr. in R5 zwischen
00F0 310B              174             ACALL   calculateMiddleNeighbours       ;Berechne die Nachbarn für die Mittlere Zeile (Eigene
00F2 22                175             ret
                       176
                       177     checkBottom:
00F3 EA                178             MOV     A, R2           ;               ;Lade Zeilen Nr.
00F4 7800              179             MOV     R0, #0          ;               ;Wenn Zeilen Nr. = 7 ist die oberste Zeile die darunt
00F6 B40703            180             CJNE    A, #7, getBottomRow
00F9 0200FE            181             JMP     gotBottomrow    ;Wenn die Zeilen Nr. = 7 muss nichts mehr getan werden
                       182     getBottomRow:
00FC 04                183             INC     A               ;                       ;Wenn sie != 7 dann ist die untere Zeilen Nr.
00FD F8                184             MOV     R0, A           ;               ;Speichern der Unteren Zeilen Nr. in R5
                       185     gotBottomRow:
00FE 120102            186             CALL    calculateNeighbours     ;Berechne die Nachbarn für die Zeile
0101 22                187             ret
                       188
                       189     calculateNeighbours:
0102 E2                190             MOVX    A, @R0          ;               ;Laden der entsprechenden Zeile
0103 FE                191             MOV     R6, A           ;Speichern der rotierten Zeile
                       192
0104 120111            193             call    checkSideNeighbour      ;Ermitteln ob die Seitlichen Nachbarn gesetzt sind
0107 120120            194             call    checkMiddleNeighbour    ;Ermitteln ob mittlerer Nachbar gesetzt ist
010A 22                195             ret
                       196
                       197     calculateMiddleNeighbours:
010B E2                198             MOVX    A, @R0          ;               ;Laden der entsprechenden Zeile
010C FE                199             MOV     R6, A           ;Speichern der rotierten Zeile
                       200
010D 120111            201             call    checkSideNeighbour      ;Ermitteln ob die Seitlichen Nachbarn gesetzt sind
0110 22                202             ret
                       203
                       204
                       205     ;----------------------
                       206     ; Logik zum ermitteln der Nachbarn Rechts, Links und in der selben Spalte einer Zelle
                       207     ;----------------------
                       208     checkSideNeighbour:
0111 EB                209             MOV     A, R3           ;Lade Spalten Nr. in R3
0112 93                210             MOVC    A, @A+DPTR      ;Lade Maske für die Spalte A
0113 5E                211             ANL     A, R6           ;               ;Ermittel den Zustand der Spalte mithilfe der Zeile R
0114 6001              212             JZ      rightCheckDone  ;Wenn A = 0 war die Zelle nicht gesezt und das erhöhen des Nachbar Zä
0116 0F                213             INC     R7              ;                       ;Sonst: Erhöhen des Nachbarzählers
                       214     rightcheckdone:
                       215
0117 EB                216             MOV     A, R3           ;Lade Spalten Nr. in R3
0118 2402              217             ADD     A, #2           ;Erhöhe Spalten Nr. um zwei um den rechten Nachbarn auszumaskieren
011A 93                218             MOVC    A, @A+DPTR      ;Lade Maske für die Spalte A
011B 5E                219             ANL     A, R6           ;               ;Ermittel den Zustand der Spalte mithilfe der Zeile R
011C 6001              220             JZ      leftCheckDone   ;Wenn A = 0 war die Zelle nicht gesezt und das erhöhen des Nachbar Zä
011E 0F                221             INC     R7              ;                       ;Sonst: Erhöhen des Nachbarzählers
                       222     leftCheckDone:
                       223
011F 22                224             ret                     ;Fertig -> Rücksprung
                       225
                       226     checkMiddleNeighbour:
0120 EB                227             MOV     A, R3           ;Lade Spalten Nr. in R3
0121 04                228             INC     A               ;Erhöhe Spalten Nr. um eins um den mittleren Nachbarn auszumaskieren
0122 93                229             MOVC    A, @A+DPTR      ;Lade Maske für die Spalte A
0123 5E                230             ANL     A, R6           ;               ;Ermittel den Zustand der Spalte mithilfe der Zeile R
0124 6001              231             JZ      middleCheckDone ;Wenn A = 0 war die Zelle nicht gesezt und das erhöhen des Nachbar Zä
0126 0F                232             INC     R7              ;                       ;Sonst: Erhöhen des Nachbarzählers
                       233     middleCheckDone:
                       234
0127 22                235             ret                     ;Fertig -> Rücksprung
                       236
                       237     ;----------------------
                       238     ; Kopieren der neuen Generation auf die Speicherstellen welche welche gezeichnet werden
                       239     ;----------------------
                       240     copyNewGenerationToField:
0128 7864              241             MOV     R0, #100
012A 7900              242             MOV     R1, #0
012C E2                243             MOVX    A, @R0
012D F3                244             MOVX    @R1, A
                       245
012E 7865              246             MOV     R0, #101
0130 7901              247             MOV     R1, #1
0132 E2                248             MOVX    A, @R0
0133 F3                249             MOVX    @R1, A
                       250
0134 7866              251             MOV     R0, #102
0136 7902              252             MOV     R1, #2
0138 E2                253             MOVX    A, @R0
0139 F3                254             MOVX    @R1, A
                       255
013A 7867              256             MOV     R0, #103
013C 7903              257             MOV     R1, #3
013E E2                258             MOVX    A, @R0
013F F3                259             MOVX    @R1, A
                       260
0140 7868              261             MOV     R0, #104
0142 7904              262             MOV     R1, #4
0144 E2                263             MOVX    A, @R0
0145 F3                264             MOVX    @R1, A
                       265
0146 7869              266             MOV     R0, #105
0148 7905              267             MOV     R1, #5
014A E2                268             MOVX    A, @R0
014B F3                269             MOVX    @R1, A
                       270
014C 786A              271             MOV     R0, #106
014E 7906              272             MOV     R1, #6
0150 E2                273             MOVX    A, @R0
0151 F3                274             MOVX    @R1, A
                       275
0152 786B              276             MOV     R0, #107
0154 7907              277             MOV     R1, #7
0156 E2                278             MOVX    A, @R0
0157 F3                279             MOVX    @R1, A
                       280
0158 22                281             ret
                       282
                       283     ;----------------------
                       284     ; Zeichen der Speicher stelle 0h bis 7h auf die LED-Matrix
                       285     ;----------------------
                       286     display:
0159 7800              287             mov     R0, #0h
015B 7901              288             mov     R1, #00000001b
                       289
015D 7400              290             mov     A, #0
                       291
                       292     zeichneNaechsteReihe:
015F 120167            293             call    displayRow
                       294
0162 04                295             inc     A
0163 B408F9            296             cjne    A, #8, zeichneNaechsteReihe
0166 22                297             ret
                       298
                       299     ;----------------------
                       300     ; Zeichen der Aktuellen Zeile
                       301     ;----------------------
                       302     displayRow:
0167 C0E0              303             push    A
0169 E2                304             movx    A, @R0
016A 89B0              305             mov     P3, R1
016C F5A0              306             mov     P2, a
016E 75A000            307             mov     P2, #0
                       308
0171 08                309             inc     R0
0172 E9                310             MOV     A, R1
0173 23                311             RL      A
0174 F9                312             MOV     R1, A
0175 D0E0              313             pop     A
0177 22                314             ret
                       315
                       316     ;----------------------
                       317     ; Nutzereingabe für das Spielfeld
                       318     ;----------------------
                       319     initCanvas:
0178 7800              320             MOV     R0, #0          ;                               ;Zeilen zähler
017A 75B001            321             MOV     P3, #00000001   ;
                       322
                       323     getNextRowInput:
                       324     waitForConfirmation:
017D E580              325             MOV     A, P0           ;
017F 5401              326             ANL     A, #00000001b
                       327             ;jnz    waitForConfirmation     ;Warte bis P0.0 gedrückt wurde
                       328             ; Springt hoch, solange Accumulator A nicht null ist.
                       329     waitForConfirmationButtonRelease:
0181 E580              330             MOV     A, P0           ;
0183 5401              331             ANL     A, #00000001b
0185 60FA              332             jz      waitForConfirmationButtonRelease        ;Warte bis P0.0 "Losgelassen" wurde
                       333             ; Continues, wenn Accumulator A null ist -> Wert aus ANL (Bitwise AND) bleibt #00000001b
                       334             ;
0187 E590              335             MOV     A, P1           ;Zeile 0 in Akku
0189 F4                336             CPL     A
018A F2                337             movx    @R0, A          ;Speichern in Register (!) ERROR on 8051
                       338
018B F5A0              339             mov     P2, A           ;LEDs an
018D 75A000            340             mov     P2, #0          ;LEDs aus
                       341
0190 E5B0              342             mov     a, P3           ;Zeilenmaske laden
0192 23                343             RL      A               ;Maske für die nächste Zeile erstellen
0193 F5B0              344             mov     p3, a           ;Maske an p3 ausgeben
0195 08                345             inc     R0              ;Zeilenzähler erhöhen
                       346
0196 B808E4            347             cjne    R0, #8, getNextRowInput ;Wenn alle acht zeilen gezeichnet sind wird weiter gemacht
                       348
0199 22                349             ret
                       350
                       351     ; -----------------
                       352     ; Masken
                       353     ;------------------
019A 8040201008        354     table:  db      10000000b, 01000000b, 00100000b, 00010000b, 00001000b, 00000100b, 00000010b, 00000001
     040201
01A2 0180402010        355     table2: db      00000001b, 10000000b, 01000000b, 00100000b, 00010000b, 00001000b, 00000100b, 00000010
     0804020180
                       356
                       357             end
ASSEMBLY COMPLETE, NO ERRORS FOUND, 1 WARNING


ERROR SUMMARY:
Line 20, WARNING:ThisORGhaslowervaluethanthepreviousone

SYMBOL TABLE:
??MCU_8051_IDE . . . . . . . . . . .  N  NUMB  8051H  NOT USED
??VERSION. . . . . . . . . . . . . .  N  NUMB  0149H  NOT USED
AC . . . . . . . . . . . . . . . . .  B  ADDR  00D6H  NOT USED
ACC. . . . . . . . . . . . . . . . .  D  ADDR  00E0H
ACSR . . . . . . . . . . . . . . . .  D  ADDR  0097H  NOT USED
ADCF . . . . . . . . . . . . . . . .  D  ADDR  00F6H  NOT USED
ADCLK. . . . . . . . . . . . . . . .  D  ADDR  00F2H  NOT USED
ADCON. . . . . . . . . . . . . . . .  D  ADDR  00F3H  NOT USED
ADDH . . . . . . . . . . . . . . . .  D  ADDR  00F5H  NOT USED
ADDL . . . . . . . . . . . . . . . .  D  ADDR  00F4H  NOT USED
AUXR . . . . . . . . . . . . . . . .  D  ADDR  008EH  NOT USED
AUXR1. . . . . . . . . . . . . . . .  D  ADDR  00A2H  NOT USED
B. . . . . . . . . . . . . . . . . .  D  ADDR  00F0H  NOT USED
BDRCON . . . . . . . . . . . . . . .  D  ADDR  009BH  NOT USED
BDRCON_1 . . . . . . . . . . . . . .  D  ADDR  009CH  NOT USED
BRL. . . . . . . . . . . . . . . . .  D  ADDR  009AH  NOT USED
CALCULATEMIDDLENEIGHBOURS. . . . . .  C  ADDR  010BH
CALCULATENEIGHBOURS. . . . . . . . .  C  ADDR  0102H
CCAP0H . . . . . . . . . . . . . . .  D  ADDR  00FAH  NOT USED
CCAP0L . . . . . . . . . . . . . . .  D  ADDR  00EAH  NOT USED
CCAP1H . . . . . . . . . . . . . . .  D  ADDR  00FBH  NOT USED
CCAP1L . . . . . . . . . . . . . . .  D  ADDR  00EBH  NOT USED
CCAP2H . . . . . . . . . . . . . . .  D  ADDR  00FCH  NOT USED
CCAP3H . . . . . . . . . . . . . . .  D  ADDR  00FDH  NOT USED
CCAP4H . . . . . . . . . . . . . . .  D  ADDR  00FEH  NOT USED
CCAPL2H. . . . . . . . . . . . . . .  D  ADDR  00FCH  NOT USED
CCAPL2L. . . . . . . . . . . . . . .  D  ADDR  00ECH  NOT USED
CCAPL3H. . . . . . . . . . . . . . .  D  ADDR  00FDH  NOT USED
CCAPL3L. . . . . . . . . . . . . . .  D  ADDR  00EDH  NOT USED
CCAPL4H. . . . . . . . . . . . . . .  D  ADDR  00FEH  NOT USED
CCAPL4L. . . . . . . . . . . . . . .  D  ADDR  00EEH  NOT USED
CCAPM0 . . . . . . . . . . . . . . .  D  ADDR  00DAH  NOT USED
CCAPM1 . . . . . . . . . . . . . . .  D  ADDR  00DBH  NOT USED
CCAPM2 . . . . . . . . . . . . . . .  D  ADDR  00DCH  NOT USED
CCAPM3 . . . . . . . . . . . . . . .  D  ADDR  00DDH  NOT USED
CCAPM4 . . . . . . . . . . . . . . .  D  ADDR  00DEH  NOT USED
CCF0 . . . . . . . . . . . . . . . .  B  ADDR  00D8H  NOT USED
CCF1 . . . . . . . . . . . . . . . .  B  ADDR  00D9H  NOT USED
CCF2 . . . . . . . . . . . . . . . .  B  ADDR  00DAH  NOT USED
CCF3 . . . . . . . . . . . . . . . .  B  ADDR  00DBH  NOT USED
CCF4 . . . . . . . . . . . . . . . .  B  ADDR  00DCH  NOT USED
CCON . . . . . . . . . . . . . . . .  D  ADDR  00D8H  NOT USED
CFINT. . . . . . . . . . . . . . . .  C  ADDR  0033H  NOT USED
CH . . . . . . . . . . . . . . . . .  D  ADDR  00F9H  NOT USED
CHECKBOTTOM. . . . . . . . . . . . .  C  ADDR  00F3H
CHECKCOLUMN. . . . . . . . . . . . .  C  ADDR  009FH
CHECKEND . . . . . . . . . . . . . .  C  ADDR  00CFH
CHECKMID . . . . . . . . . . . . . .  C  ADDR  00EEH
CHECKMIDDLENEIGHBOUR . . . . . . . .  C  ADDR  0120H
CHECKPERFECTPOPULATION . . . . . . .  C  ADDR  00C4H
CHECKROW . . . . . . . . . . . . . .  C  ADDR  0099H
CHECKSIDENEIGHBOUR . . . . . . . . .  C  ADDR  0111H
CHECKTOP . . . . . . . . . . . . . .  C  ADDR  00E3H
CHECKUNDERPOPULATION . . . . . . . .  C  ADDR  00BFH
CKCON. . . . . . . . . . . . . . . .  D  ADDR  008FH  NOT USED
CKCON0 . . . . . . . . . . . . . . .  D  ADDR  008FH  NOT USED
CKRL . . . . . . . . . . . . . . . .  D  ADDR  0097H  NOT USED
CKSEL. . . . . . . . . . . . . . . .  D  ADDR  0085H  NOT USED
CL . . . . . . . . . . . . . . . . .  D  ADDR  00E9H  NOT USED
CLKREG . . . . . . . . . . . . . . .  D  ADDR  008FH  NOT USED
CMOD . . . . . . . . . . . . . . . .  D  ADDR  00D9H  NOT USED
COPYNEWGENERATIONTOFIELD . . . . . .  C  ADDR  0128H
CPRL2. . . . . . . . . . . . . . . .  B  ADDR  00C8H  NOT USED
CR . . . . . . . . . . . . . . . . .  B  ADDR  00DEH  NOT USED
CT2. . . . . . . . . . . . . . . . .  B  ADDR  00C9H  NOT USED
CY . . . . . . . . . . . . . . . . .  B  ADDR  00D7H  NOT USED
DISPLAY. . . . . . . . . . . . . . .  C  ADDR  0159H
DISPLAYROW . . . . . . . . . . . . .  C  ADDR  0167H
DP0H . . . . . . . . . . . . . . . .  D  ADDR  0083H  NOT USED
DP0L . . . . . . . . . . . . . . . .  D  ADDR  0082H  NOT USED
DP1H . . . . . . . . . . . . . . . .  D  ADDR  0085H  NOT USED
DP1L . . . . . . . . . . . . . . . .  D  ADDR  0084H  NOT USED
DPH. . . . . . . . . . . . . . . . .  D  ADDR  0083H  NOT USED
DPL. . . . . . . . . . . . . . . . .  D  ADDR  0082H  NOT USED
EA . . . . . . . . . . . . . . . . .  B  ADDR  00AFH  NOT USED
EC . . . . . . . . . . . . . . . . .  B  ADDR  00AEH  NOT USED
EECON. . . . . . . . . . . . . . . .  D  ADDR  0096H  NOT USED
ES . . . . . . . . . . . . . . . . .  B  ADDR  00ACH  NOT USED
ET0. . . . . . . . . . . . . . . . .  B  ADDR  00A9H  NOT USED
ET1. . . . . . . . . . . . . . . . .  B  ADDR  00ABH  NOT USED
ET2. . . . . . . . . . . . . . . . .  B  ADDR  00ADH  NOT USED
EX0. . . . . . . . . . . . . . . . .  B  ADDR  00A8H  NOT USED
EX1. . . . . . . . . . . . . . . . .  B  ADDR  00AAH  NOT USED
EXEN2. . . . . . . . . . . . . . . .  B  ADDR  00CBH  NOT USED
EXF2 . . . . . . . . . . . . . . . .  B  ADDR  00CEH  NOT USED
EXTI0. . . . . . . . . . . . . . . .  C  ADDR  0003H  NOT USED
EXTI1. . . . . . . . . . . . . . . .  C  ADDR  0013H  NOT USED
F0 . . . . . . . . . . . . . . . . .  B  ADDR  00D5H  NOT USED
FE . . . . . . . . . . . . . . . . .  B  ADDR  009FH  NOT USED
GETBOTTOMROW . . . . . . . . . . . .  C  ADDR  00FCH
GETNEXTROWINPUT. . . . . . . . . . .  C  ADDR  017DH
GOTBOTTOMROW . . . . . . . . . . . .  C  ADDR  00FEH
GOTTOPROW. . . . . . . . . . . . . .  C  ADDR  00EAH
IE . . . . . . . . . . . . . . . . .  D  ADDR  00A8H
IE0. . . . . . . . . . . . . . . . .  B  ADDR  0089H  NOT USED
IE1. . . . . . . . . . . . . . . . .  B  ADDR  008BH  NOT USED
INIT . . . . . . . . . . . . . . . .  C  ADDR  0050H
INITCANVAS . . . . . . . . . . . . .  C  ADDR  0178H
INT0 . . . . . . . . . . . . . . . .  B  ADDR  00B2H  NOT USED
INT1 . . . . . . . . . . . . . . . .  B  ADDR  00B3H  NOT USED
IP . . . . . . . . . . . . . . . . .  D  ADDR  00B8H  NOT USED
IPH. . . . . . . . . . . . . . . . .  D  ADDR  00B7H  NOT USED
IPH0 . . . . . . . . . . . . . . . .  D  ADDR  00B7H  NOT USED
IPH1 . . . . . . . . . . . . . . . .  D  ADDR  00B3H  NOT USED
IPL0 . . . . . . . . . . . . . . . .  D  ADDR  00B8H  NOT USED
IPL1 . . . . . . . . . . . . . . . .  D  ADDR  00B2H  NOT USED
IT0. . . . . . . . . . . . . . . . .  B  ADDR  0088H  NOT USED
IT1. . . . . . . . . . . . . . . . .  B  ADDR  008AH  NOT USED
KBE. . . . . . . . . . . . . . . . .  D  ADDR  009DH  NOT USED
KBF. . . . . . . . . . . . . . . . .  D  ADDR  009EH  NOT USED
KBLS . . . . . . . . . . . . . . . .  D  ADDR  009CH  NOT USED
LEFTCHECKDONE. . . . . . . . . . . .  C  ADDR  011FH
MAIN . . . . . . . . . . . . . . . .  C  ADDR  0069H
MIDDLECHECKDONE. . . . . . . . . . .  C  ADDR  0127H
NEW_GENERATION . . . . . . . . . . .  C  ADDR  0097H
OSCCON . . . . . . . . . . . . . . .  D  ADDR  0086H  NOT USED
OV . . . . . . . . . . . . . . . . .  B  ADDR  00D2H  NOT USED
P. . . . . . . . . . . . . . . . . .  B  ADDR  00D0H  NOT USED
P0 . . . . . . . . . . . . . . . . .  D  ADDR  0080H
P1 . . . . . . . . . . . . . . . . .  D  ADDR  0090H
P1M1 . . . . . . . . . . . . . . . .  D  ADDR  00D4H  NOT USED
P1M2 . . . . . . . . . . . . . . . .  D  ADDR  00E2H  NOT USED
P2 . . . . . . . . . . . . . . . . .  D  ADDR  00A0H
P3 . . . . . . . . . . . . . . . . .  D  ADDR  00B0H
P3M1 . . . . . . . . . . . . . . . .  D  ADDR  00D5H  NOT USED
P3M2 . . . . . . . . . . . . . . . .  D  ADDR  00E3H  NOT USED
P4 . . . . . . . . . . . . . . . . .  D  ADDR  00C0H  NOT USED
P4M1 . . . . . . . . . . . . . . . .  D  ADDR  00D6H  NOT USED
P4M2 . . . . . . . . . . . . . . . .  D  ADDR  00E4H  NOT USED
P5 . . . . . . . . . . . . . . . . .  D  ADDR  00E8H  NOT USED
PC . . . . . . . . . . . . . . . . .  B  ADDR  00BEH  NOT USED
PCON . . . . . . . . . . . . . . . .  D  ADDR  0087H  NOT USED
PPCL . . . . . . . . . . . . . . . .  B  ADDR  00BEH  NOT USED
PS . . . . . . . . . . . . . . . . .  B  ADDR  00BCH  NOT USED
PSL. . . . . . . . . . . . . . . . .  B  ADDR  00BCH  NOT USED
PSW. . . . . . . . . . . . . . . . .  D  ADDR  00D0H  NOT USED
PT0. . . . . . . . . . . . . . . . .  B  ADDR  00B9H  NOT USED
PT0L . . . . . . . . . . . . . . . .  B  ADDR  00B9H  NOT USED
PT1. . . . . . . . . . . . . . . . .  B  ADDR  00BBH  NOT USED
PT1L . . . . . . . . . . . . . . . .  B  ADDR  00BBH  NOT USED
PT2. . . . . . . . . . . . . . . . .  B  ADDR  00BDH  NOT USED
PT2L . . . . . . . . . . . . . . . .  B  ADDR  00BDH  NOT USED
PX0. . . . . . . . . . . . . . . . .  B  ADDR  00B8H  NOT USED
PX0L . . . . . . . . . . . . . . . .  B  ADDR  00B8H  NOT USED
PX1. . . . . . . . . . . . . . . . .  B  ADDR  00BAH  NOT USED
PX1L . . . . . . . . . . . . . . . .  B  ADDR  00BAH  NOT USED
RB8. . . . . . . . . . . . . . . . .  B  ADDR  009AH  NOT USED
RCAP2H . . . . . . . . . . . . . . .  D  ADDR  00CBH  NOT USED
RCAP2L . . . . . . . . . . . . . . .  D  ADDR  00CAH  NOT USED
RCLK . . . . . . . . . . . . . . . .  B  ADDR  00CDH  NOT USED
RD . . . . . . . . . . . . . . . . .  B  ADDR  00B7H  NOT USED
REN. . . . . . . . . . . . . . . . .  B  ADDR  009CH  NOT USED
RESET. . . . . . . . . . . . . . . .  C  ADDR  0000H  NOT USED
RI . . . . . . . . . . . . . . . . .  B  ADDR  0098H  NOT USED
RIGHTCHECKDONE . . . . . . . . . . .  C  ADDR  0117H
RS0. . . . . . . . . . . . . . . . .  B  ADDR  00D3H  NOT USED
RS1. . . . . . . . . . . . . . . . .  B  ADDR  00D4H  NOT USED
RXD. . . . . . . . . . . . . . . . .  B  ADDR  00B0H  NOT USED
SADDR. . . . . . . . . . . . . . . .  D  ADDR  00A9H  NOT USED
SADDR_0. . . . . . . . . . . . . . .  D  ADDR  00A9H  NOT USED
SADDR_1. . . . . . . . . . . . . . .  D  ADDR  00AAH  NOT USED
SADEN. . . . . . . . . . . . . . . .  D  ADDR  00B9H  NOT USED
SADEN_0. . . . . . . . . . . . . . .  D  ADDR  00B9H  NOT USED
SADEN_1. . . . . . . . . . . . . . .  D  ADDR  00BAH  NOT USED
SBUF . . . . . . . . . . . . . . . .  D  ADDR  0099H  NOT USED
SCON . . . . . . . . . . . . . . . .  D  ADDR  0098H  NOT USED
SETTIMER0. . . . . . . . . . . . . .  C  ADDR  0075H
SETTIMER1. . . . . . . . . . . . . .  C  ADDR  007EH
SINT . . . . . . . . . . . . . . . .  C  ADDR  0023H  NOT USED
SM0. . . . . . . . . . . . . . . . .  B  ADDR  009FH  NOT USED
SM1. . . . . . . . . . . . . . . . .  B  ADDR  009EH  NOT USED
SM2. . . . . . . . . . . . . . . . .  B  ADDR  009DH  NOT USED
SP . . . . . . . . . . . . . . . . .  D  ADDR  0081H  NOT USED
SPCON. . . . . . . . . . . . . . . .  D  ADDR  00C3H  NOT USED
SPCR . . . . . . . . . . . . . . . .  D  ADDR  00D5H  NOT USED
SPDAT. . . . . . . . . . . . . . . .  D  ADDR  00C5H  NOT USED
SPDR . . . . . . . . . . . . . . . .  D  ADDR  0086H  NOT USED
SPSR . . . . . . . . . . . . . . . .  D  ADDR  00AAH  NOT USED
SPSTA. . . . . . . . . . . . . . . .  D  ADDR  00C4H  NOT USED
T0 . . . . . . . . . . . . . . . . .  B  ADDR  00B4H  NOT USED
T1 . . . . . . . . . . . . . . . . .  B  ADDR  00B5H  NOT USED
T2CON. . . . . . . . . . . . . . . .  D  ADDR  00C8H  NOT USED
T2MOD. . . . . . . . . . . . . . . .  D  ADDR  00C9H  NOT USED
TABLE. . . . . . . . . . . . . . . .  C  ADDR  019AH
TABLE2 . . . . . . . . . . . . . . .  C  ADDR  01A2H
TB8. . . . . . . . . . . . . . . . .  B  ADDR  009BH  NOT USED
TCLK . . . . . . . . . . . . . . . .  B  ADDR  00CCH  NOT USED
TCON . . . . . . . . . . . . . . . .  D  ADDR  0088H  NOT USED
TF0. . . . . . . . . . . . . . . . .  B  ADDR  008DH  NOT USED
TF1. . . . . . . . . . . . . . . . .  B  ADDR  008FH  NOT USED
TF2. . . . . . . . . . . . . . . . .  B  ADDR  00CFH  NOT USED
TH0. . . . . . . . . . . . . . . . .  D  ADDR  008CH
TH1. . . . . . . . . . . . . . . . .  D  ADDR  008DH
TH2. . . . . . . . . . . . . . . . .  D  ADDR  00CDH  NOT USED
TI . . . . . . . . . . . . . . . . .  B  ADDR  0099H  NOT USED
TIMER0 . . . . . . . . . . . . . . .  C  ADDR  000BH  NOT USED
TIMER0ROUTINE. . . . . . . . . . . .  C  ADDR  0087H
TIMER1 . . . . . . . . . . . . . . .  C  ADDR  001BH  NOT USED
TIMER2 . . . . . . . . . . . . . . .  C  ADDR  002BH  NOT USED
TL0. . . . . . . . . . . . . . . . .  D  ADDR  008AH
TL1. . . . . . . . . . . . . . . . .  D  ADDR  008BH
TL2. . . . . . . . . . . . . . . . .  D  ADDR  00CCH  NOT USED
TMOD . . . . . . . . . . . . . . . .  D  ADDR  0089H
TR0. . . . . . . . . . . . . . . . .  B  ADDR  008CH
TR1. . . . . . . . . . . . . . . . .  B  ADDR  008EH
TR2. . . . . . . . . . . . . . . . .  B  ADDR  00CAH  NOT USED
TXD. . . . . . . . . . . . . . . . .  B  ADDR  00B1H  NOT USED
WAITFORCONFIRMATION. . . . . . . . .  C  ADDR  017DH  NOT USED
WAITFORCONFIRMATIONBUTTONRELEASE . .  C  ADDR  0181H
WDTCON . . . . . . . . . . . . . . .  D  ADDR  00A7H  NOT USED
WDTPRG . . . . . . . . . . . . . . .  D  ADDR  00A7H  NOT USED
WDTRST . . . . . . . . . . . . . . .  D  ADDR  00A6H  NOT USED
WR . . . . . . . . . . . . . . . . .  B  ADDR  00B6H  NOT USED
ZEICHNENAECHSTEREIHE . . . . . . . .  C  ADDR  015FH